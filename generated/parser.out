Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     program -> NEWLINE program
Rule 3     program -> statement ; NEWLINE
Rule 4     program -> statement NEWLINE
Rule 5     program -> statement ; program
Rule 6     program -> statement NEWLINE program
Rule 7     programBlock -> { new_scope program }
Rule 8     programBlock -> NEWLINE programBlock
Rule 9     caseProgram -> : new_scope program
Rule 10    programStatement -> statement
Rule 11    statement -> NEWLINE statement
Rule 12    statement -> assignation
Rule 13    statement -> structure
Rule 14    statement -> structureIf
Rule 15    statement -> structureTernary
Rule 16    statement -> logStatement
Rule 17    statement -> breakStatement
Rule 18    statement -> continueStatement
Rule 19    statement -> functionDeclaration
Rule 20    statement -> functionCall
Rule 21    statement -> returnStatement
Rule 22    statement -> varList
Rule 23    structureIf -> IF ( condition ) programStatement NEWLINE
Rule 24    structureIf -> IF ( condition ) programBlock
Rule 25    structureElse -> ELSE programStatement
Rule 26    structureElse -> ELSE programBlock
Rule 27    structure -> structureIf structureElse
Rule 28    structureTernary -> condition ? returnValues : returnValues
Rule 29    structure -> FOR new_scope ( assignation ; condition ; assignation ) programBlock
Rule 30    structure -> FOR new_scope ( assignation ; condition ; assignation ) programStatement
Rule 31    structure -> WHILE ( condition ) programStatement
Rule 32    structure -> WHILE ( condition ) programBlock
Rule 33    structure -> DO programBlock WHILE ( condition )
Rule 34    structure -> DO programStatement NEWLINE WHILE ( condition )
Rule 35    structure -> SWITCH ( IDENTIFIER ) { new_scope caseList }
Rule 36    structure -> SWITCH ( IDENTIFIER ) { }
Rule 37    caseList -> NEWLINE caseList
Rule 38    caseStructure -> CASE expression caseProgram
Rule 39    caseList -> caseStructure
Rule 40    caseStructure -> DEFAULT caseProgram
Rule 41    caseList -> caseList NEWLINE caseStructure
Rule 42    caseList -> caseList caseStructure
Rule 43    conditionSymbol -> LT
Rule 44    conditionSymbol -> GT
Rule 45    conditionSymbol -> LTE
Rule 46    conditionSymbol -> GTE
Rule 47    conditionSymbol -> EQUALV
Rule 48    conditionSymbol -> EQUALVT
Rule 49    conditionSymbol -> NOTEQUALV
Rule 50    conditionSymbol -> NOTEQUALVT
Rule 51    condition -> ! condition
Rule 52    condition -> condition AND condition
Rule 53    condition -> condition OR condition
Rule 54    condition -> expression conditionSymbol expression
Rule 55    condition -> ( condition )
Rule 56    breakStatement -> BREAK
Rule 57    continueStatement -> CONTINUE
Rule 58    logStatement -> LOG ( returnValues )
Rule 59    varCreation -> VAR IDENTIFIER
Rule 60    varCreation -> LET IDENTIFIER
Rule 61    varList -> varCreation
Rule 62    varList -> varList , IDENTIFIER
Rule 63    arrayDeclaration -> [ ]
Rule 64    arrayDeclaration -> [ tokenList ]
Rule 65    tokenList -> IDENTIFIER
Rule 66    tokenList -> NUMBER
Rule 67    tokenList -> tokenList , IDENTIFIER
Rule 68    tokenList -> tokenList , NUMBER
Rule 69    expression -> IDENTIFIER [ NUMBER ]
Rule 70    expression -> NUMBER
Rule 71    expression -> IDENTIFIER
Rule 72    expression -> ( expression )
Rule 73    expression -> expression ADD_OP expression
Rule 74    expression -> expression MUL_OP expression
Rule 75    expression -> ADD_OP expression
Rule 76    assignation -> IDENTIFIER ADD_OP = expression
Rule 77    assignation -> IDENTIFIER MUL_OP = expression
Rule 78    assignation -> IDENTIFIER ADD_OP = functionCall
Rule 79    assignation -> IDENTIFIER MUL_OP = functionCall
Rule 80    assignation -> IDENTIFIER ADD_OP ADD_OP
Rule 81    assignation -> IDENTIFIER = returnValues
Rule 82    assignation -> varList = returnValues
Rule 83    assignation -> varList = structureTernary
Rule 84    functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList ) programBlock
Rule 85    functionDeclaration -> FUNCTION IDENTIFIER ( ) programBlock
Rule 86    argList -> IDENTIFIER
Rule 87    argList -> argList , IDENTIFIER
Rule 88    functionCall -> IDENTIFIER ( expressionList )
Rule 89    functionCall -> IDENTIFIER ( )
Rule 90    expressionList -> expression
Rule 91    expressionList -> expressionList , expression
Rule 92    returnStatement -> RETURN
Rule 93    returnStatement -> RETURN returnValues
Rule 94    returnStatement -> RETURN condition
Rule 95    returnValues -> expression
Rule 96    returnValues -> arrayDeclaration
Rule 97    returnValues -> functionCall

Terminals, with rules where they appear

!                    : 51
(                    : 23 24 29 30 31 32 33 34 35 36 55 58 72 84 85 88 89
)                    : 23 24 29 30 31 32 33 34 35 36 55 58 72 84 85 88 89
,                    : 62 67 68 87 91
:                    : 9 28
;                    : 3 5 29 29 30 30
=                    : 76 77 78 79 81 82 83
?                    : 28
ADD_OP               : 73 75 76 78 80 80
AND                  : 52
BREAK                : 56
CASE                 : 38
CONTINUE             : 57
DEFAULT              : 40
DO                   : 33 34
ELSE                 : 25 26
EQUALV               : 47
EQUALVT              : 48
FOR                  : 29 30
FUNCTION             : 84 85
GT                   : 44
GTE                  : 46
IDENTIFIER           : 35 36 59 60 62 65 67 69 71 76 77 78 79 80 81 84 85 86 87 88 89
IF                   : 23 24
LET                  : 60
LOG                  : 58
LT                   : 43
LTE                  : 45
MUL_OP               : 74 77 79
NEWLINE              : 2 3 4 6 8 11 23 34 37 41
NOTEQUALV            : 49
NOTEQUALVT           : 50
NUMBER               : 66 68 69 70
OR                   : 53
RETURN               : 92 93 94
SWITCH               : 35 36
VAR                  : 59
WHILE                : 31 32 33 34
[                    : 63 64 69
]                    : 63 64 69
error                : 
{                    : 7 35 36
}                    : 7 35 36

Nonterminals, with rules where they appear

argList              : 84 87
arrayDeclaration     : 96
assignation          : 12 29 29 30 30
breakStatement       : 17
caseList             : 35 37 41 42
caseProgram          : 38 40
caseStructure        : 39 41 42
condition            : 23 24 28 29 30 31 32 33 34 51 52 52 53 53 55 94
conditionSymbol      : 54
continueStatement    : 18
expression           : 38 54 54 72 73 73 74 74 75 76 77 90 91 95
expressionList       : 88 91
functionCall         : 20 78 79 97
functionDeclaration  : 19
logStatement         : 16
new_scope            : 7 9 29 30 35 84
program              : 2 5 6 7 9 0
programBlock         : 8 24 26 29 32 33 84 85
programStatement     : 23 25 30 31 34
returnStatement      : 21
returnValues         : 28 28 58 81 82 93
statement            : 3 4 5 6 10 11
structure            : 13
structureElse        : 27
structureIf          : 14 27
structureTernary     : 15 83
tokenList            : 64 67 68
varCreation          : 61
varList              : 22 62 82 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    program                        shift and go to state 1
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (2) program -> NEWLINE . program
    (11) statement -> NEWLINE . statement
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    program                        shift and go to state 35
    statement                      shift and go to state 36
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 3

    (3) program -> statement . ; NEWLINE
    (4) program -> statement . NEWLINE
    (5) program -> statement . ; program
    (6) program -> statement . NEWLINE program

    ;               shift and go to state 37
    NEWLINE         shift and go to state 38


state 4

    (12) statement -> assignation .

    ;               reduce using rule 12 (statement -> assignation .)
    NEWLINE         reduce using rule 12 (statement -> assignation .)


state 5

    (13) statement -> structure .

    ;               reduce using rule 13 (statement -> structure .)
    NEWLINE         reduce using rule 13 (statement -> structure .)


state 6

    (14) statement -> structureIf .
    (27) structure -> structureIf . structureElse
    (25) structureElse -> . ELSE programStatement
    (26) structureElse -> . ELSE programBlock

    ;               reduce using rule 14 (statement -> structureIf .)
    NEWLINE         reduce using rule 14 (statement -> structureIf .)
    ELSE            shift and go to state 40

    structureElse                  shift and go to state 39

state 7

    (15) statement -> structureTernary .

    ;               reduce using rule 15 (statement -> structureTernary .)
    NEWLINE         reduce using rule 15 (statement -> structureTernary .)


state 8

    (16) statement -> logStatement .

    ;               reduce using rule 16 (statement -> logStatement .)
    NEWLINE         reduce using rule 16 (statement -> logStatement .)


state 9

    (17) statement -> breakStatement .

    ;               reduce using rule 17 (statement -> breakStatement .)
    NEWLINE         reduce using rule 17 (statement -> breakStatement .)


state 10

    (18) statement -> continueStatement .

    ;               reduce using rule 18 (statement -> continueStatement .)
    NEWLINE         reduce using rule 18 (statement -> continueStatement .)


state 11

    (19) statement -> functionDeclaration .

    ;               reduce using rule 19 (statement -> functionDeclaration .)
    NEWLINE         reduce using rule 19 (statement -> functionDeclaration .)


state 12

    (20) statement -> functionCall .

    ;               reduce using rule 20 (statement -> functionCall .)
    NEWLINE         reduce using rule 20 (statement -> functionCall .)


state 13

    (21) statement -> returnStatement .

    ;               reduce using rule 21 (statement -> returnStatement .)
    NEWLINE         reduce using rule 21 (statement -> returnStatement .)


state 14

    (22) statement -> varList .
    (82) assignation -> varList . = returnValues
    (83) assignation -> varList . = structureTernary
    (62) varList -> varList . , IDENTIFIER

    ;               reduce using rule 22 (statement -> varList .)
    NEWLINE         reduce using rule 22 (statement -> varList .)
    =               shift and go to state 41
    ,               shift and go to state 42


state 15

    (76) assignation -> IDENTIFIER . ADD_OP = expression
    (77) assignation -> IDENTIFIER . MUL_OP = expression
    (78) assignation -> IDENTIFIER . ADD_OP = functionCall
    (79) assignation -> IDENTIFIER . MUL_OP = functionCall
    (80) assignation -> IDENTIFIER . ADD_OP ADD_OP
    (81) assignation -> IDENTIFIER . = returnValues
    (88) functionCall -> IDENTIFIER . ( expressionList )
    (89) functionCall -> IDENTIFIER . ( )
    (69) expression -> IDENTIFIER . [ NUMBER ]
    (71) expression -> IDENTIFIER .

    ADD_OP          shift and go to state 43
    MUL_OP          shift and go to state 45
    =               shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 47
    LT              reduce using rule 71 (expression -> IDENTIFIER .)
    GT              reduce using rule 71 (expression -> IDENTIFIER .)
    LTE             reduce using rule 71 (expression -> IDENTIFIER .)
    GTE             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALV          reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALVT         reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALV       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALVT      reduce using rule 71 (expression -> IDENTIFIER .)

  ! ADD_OP          [ reduce using rule 71 (expression -> IDENTIFIER .) ]
  ! MUL_OP          [ reduce using rule 71 (expression -> IDENTIFIER .) ]


state 16

    (75) expression -> ADD_OP . expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 48

state 17

    (54) condition -> expression . conditionSymbol expression
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (43) conditionSymbol -> . LT
    (44) conditionSymbol -> . GT
    (45) conditionSymbol -> . LTE
    (46) conditionSymbol -> . GTE
    (47) conditionSymbol -> . EQUALV
    (48) conditionSymbol -> . EQUALVT
    (49) conditionSymbol -> . NOTEQUALV
    (50) conditionSymbol -> . NOTEQUALVT

    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    LTE             shift and go to state 56
    GTE             shift and go to state 57
    EQUALV          shift and go to state 58
    EQUALVT         shift and go to state 59
    NOTEQUALV       shift and go to state 60
    NOTEQUALVT      shift and go to state 61

    conditionSymbol                shift and go to state 51

state 18

    (29) structure -> FOR . new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> FOR . new_scope ( assignation ; condition ; assignation ) programStatement
    (1) new_scope -> .

    (               reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 62

state 19

    (55) condition -> ( . condition )
    (72) expression -> ( . expression )
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 63
    expression                     shift and go to state 64

state 20

    (28) structureTernary -> condition . ? returnValues : returnValues
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ?               shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 21

    (31) structure -> WHILE . ( condition ) programStatement
    (32) structure -> WHILE . ( condition ) programBlock

    (               shift and go to state 68


state 22

    (33) structure -> DO . programBlock WHILE ( condition )
    (34) structure -> DO . programStatement NEWLINE WHILE ( condition )
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (10) programStatement -> . statement
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    programBlock                   shift and go to state 69
    condition                      shift and go to state 20
    programStatement               shift and go to state 70
    statement                      shift and go to state 73
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    varCreation                    shift and go to state 30

state 23

    (35) structure -> SWITCH . ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> SWITCH . ( IDENTIFIER ) { }

    (               shift and go to state 74


state 24

    (23) structureIf -> IF . ( condition ) programStatement NEWLINE
    (24) structureIf -> IF . ( condition ) programBlock

    (               shift and go to state 75


state 25

    (58) logStatement -> LOG . ( returnValues )

    (               shift and go to state 76


state 26

    (56) breakStatement -> BREAK .

    ;               reduce using rule 56 (breakStatement -> BREAK .)
    NEWLINE         reduce using rule 56 (breakStatement -> BREAK .)


state 27

    (57) continueStatement -> CONTINUE .

    ;               reduce using rule 57 (continueStatement -> CONTINUE .)
    NEWLINE         reduce using rule 57 (continueStatement -> CONTINUE .)


state 28

    (84) functionDeclaration -> FUNCTION . IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> FUNCTION . IDENTIFIER ( ) programBlock

    IDENTIFIER      shift and go to state 77


state 29

    (92) returnStatement -> RETURN .
    (93) returnStatement -> RETURN . returnValues
    (94) returnStatement -> RETURN . condition
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    ;               reduce using rule 92 (returnStatement -> RETURN .)
    NEWLINE         reduce using rule 92 (returnStatement -> RETURN .)
    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16
    [               shift and go to state 84

    returnValues                   shift and go to state 78
    condition                      shift and go to state 79
    expression                     shift and go to state 80
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82

state 30

    (61) varList -> varCreation .

    =               reduce using rule 61 (varList -> varCreation .)
    ,               reduce using rule 61 (varList -> varCreation .)
    ;               reduce using rule 61 (varList -> varCreation .)
    NEWLINE         reduce using rule 61 (varList -> varCreation .)


state 31

    (51) condition -> ! . condition
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 85
    expression                     shift and go to state 17

state 32

    (59) varCreation -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 86


state 33

    (60) varCreation -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 87


state 34

    (70) expression -> NUMBER .

    ADD_OP          reduce using rule 70 (expression -> NUMBER .)
    MUL_OP          reduce using rule 70 (expression -> NUMBER .)
    LT              reduce using rule 70 (expression -> NUMBER .)
    GT              reduce using rule 70 (expression -> NUMBER .)
    LTE             reduce using rule 70 (expression -> NUMBER .)
    GTE             reduce using rule 70 (expression -> NUMBER .)
    EQUALV          reduce using rule 70 (expression -> NUMBER .)
    EQUALVT         reduce using rule 70 (expression -> NUMBER .)
    NOTEQUALV       reduce using rule 70 (expression -> NUMBER .)
    NOTEQUALVT      reduce using rule 70 (expression -> NUMBER .)
    )               reduce using rule 70 (expression -> NUMBER .)
    ;               reduce using rule 70 (expression -> NUMBER .)
    NEWLINE         reduce using rule 70 (expression -> NUMBER .)
    ,               reduce using rule 70 (expression -> NUMBER .)
    ?               reduce using rule 70 (expression -> NUMBER .)
    AND             reduce using rule 70 (expression -> NUMBER .)
    OR              reduce using rule 70 (expression -> NUMBER .)
    :               reduce using rule 70 (expression -> NUMBER .)


state 35

    (2) program -> NEWLINE program .

    $end            reduce using rule 2 (program -> NEWLINE program .)
    }               reduce using rule 2 (program -> NEWLINE program .)
    NEWLINE         reduce using rule 2 (program -> NEWLINE program .)
    CASE            reduce using rule 2 (program -> NEWLINE program .)
    DEFAULT         reduce using rule 2 (program -> NEWLINE program .)


state 36

    (11) statement -> NEWLINE statement .
    (3) program -> statement . ; NEWLINE
    (4) program -> statement . NEWLINE
    (5) program -> statement . ; program
    (6) program -> statement . NEWLINE program

    ;               reduce using rule 11 (statement -> NEWLINE statement .)
    NEWLINE         reduce using rule 11 (statement -> NEWLINE statement .)

  ! ;               [ shift and go to state 37 ]
  ! NEWLINE         [ shift and go to state 38 ]


state 37

    (3) program -> statement ; . NEWLINE
    (5) program -> statement ; . program
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    NEWLINE         shift and go to state 88
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    statement                      shift and go to state 3
    program                        shift and go to state 89
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 38

    (4) program -> statement NEWLINE .
    (6) program -> statement NEWLINE . program
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    $end            reduce using rule 4 (program -> statement NEWLINE .)
    }               reduce using rule 4 (program -> statement NEWLINE .)
    NEWLINE         reduce using rule 4 (program -> statement NEWLINE .)
    CASE            reduce using rule 4 (program -> statement NEWLINE .)
    DEFAULT         reduce using rule 4 (program -> statement NEWLINE .)
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

  ! NEWLINE         [ shift and go to state 2 ]

    statement                      shift and go to state 3
    program                        shift and go to state 90
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 39

    (27) structure -> structureIf structureElse .

    ;               reduce using rule 27 (structure -> structureIf structureElse .)
    NEWLINE         reduce using rule 27 (structure -> structureIf structureElse .)


state 40

    (25) structureElse -> ELSE . programStatement
    (26) structureElse -> ELSE . programBlock
    (10) programStatement -> . statement
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    programStatement               shift and go to state 91
    programBlock                   shift and go to state 92
    statement                      shift and go to state 73
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 41

    (82) assignation -> varList = . returnValues
    (83) assignation -> varList = . structureTernary
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (28) structureTernary -> . condition ? returnValues : returnValues
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 96
    ADD_OP          shift and go to state 16
    [               shift and go to state 84
    !               shift and go to state 31

    returnValues                   shift and go to state 93
    structureTernary               shift and go to state 94
    expression                     shift and go to state 95
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82
    condition                      shift and go to state 20

state 42

    (62) varList -> varList , . IDENTIFIER

    IDENTIFIER      shift and go to state 97


state 43

    (76) assignation -> IDENTIFIER ADD_OP . = expression
    (78) assignation -> IDENTIFIER ADD_OP . = functionCall
    (80) assignation -> IDENTIFIER ADD_OP . ADD_OP

    =               shift and go to state 99
    ADD_OP          shift and go to state 98


state 44

    (81) assignation -> IDENTIFIER = . returnValues
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16
    [               shift and go to state 84

    returnValues                   shift and go to state 100
    expression                     shift and go to state 101
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82

state 45

    (77) assignation -> IDENTIFIER MUL_OP . = expression
    (79) assignation -> IDENTIFIER MUL_OP . = functionCall

    =               shift and go to state 102


state 46

    (88) functionCall -> IDENTIFIER ( . expressionList )
    (89) functionCall -> IDENTIFIER ( . )
    (90) expressionList -> . expression
    (91) expressionList -> . expressionList , expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    )               shift and go to state 104
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expressionList                 shift and go to state 103
    expression                     shift and go to state 105

state 47

    (69) expression -> IDENTIFIER [ . NUMBER ]

    NUMBER          shift and go to state 106


state 48

    (75) expression -> ADD_OP expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 75 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 75 (expression -> ADD_OP expression .)
    LT              reduce using rule 75 (expression -> ADD_OP expression .)
    GT              reduce using rule 75 (expression -> ADD_OP expression .)
    LTE             reduce using rule 75 (expression -> ADD_OP expression .)
    GTE             reduce using rule 75 (expression -> ADD_OP expression .)
    EQUALV          reduce using rule 75 (expression -> ADD_OP expression .)
    EQUALVT         reduce using rule 75 (expression -> ADD_OP expression .)
    NOTEQUALV       reduce using rule 75 (expression -> ADD_OP expression .)
    NOTEQUALVT      reduce using rule 75 (expression -> ADD_OP expression .)
    )               reduce using rule 75 (expression -> ADD_OP expression .)
    ;               reduce using rule 75 (expression -> ADD_OP expression .)
    NEWLINE         reduce using rule 75 (expression -> ADD_OP expression .)
    ,               reduce using rule 75 (expression -> ADD_OP expression .)
    ?               reduce using rule 75 (expression -> ADD_OP expression .)
    AND             reduce using rule 75 (expression -> ADD_OP expression .)
    OR              reduce using rule 75 (expression -> ADD_OP expression .)
    :               reduce using rule 75 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 52 ]
  ! MUL_OP          [ shift and go to state 53 ]


state 49

    (69) expression -> IDENTIFIER . [ NUMBER ]
    (71) expression -> IDENTIFIER .

    [               shift and go to state 47
    ADD_OP          reduce using rule 71 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 71 (expression -> IDENTIFIER .)
    LT              reduce using rule 71 (expression -> IDENTIFIER .)
    GT              reduce using rule 71 (expression -> IDENTIFIER .)
    LTE             reduce using rule 71 (expression -> IDENTIFIER .)
    GTE             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALV          reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALVT         reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALV       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALVT      reduce using rule 71 (expression -> IDENTIFIER .)
    )               reduce using rule 71 (expression -> IDENTIFIER .)
    ;               reduce using rule 71 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 71 (expression -> IDENTIFIER .)
    ,               reduce using rule 71 (expression -> IDENTIFIER .)
    ?               reduce using rule 71 (expression -> IDENTIFIER .)
    AND             reduce using rule 71 (expression -> IDENTIFIER .)
    OR              reduce using rule 71 (expression -> IDENTIFIER .)
    :               reduce using rule 71 (expression -> IDENTIFIER .)


state 50

    (72) expression -> ( . expression )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 107

state 51

    (54) condition -> expression conditionSymbol . expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 108

state 52

    (73) expression -> expression ADD_OP . expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 109

state 53

    (74) expression -> expression MUL_OP . expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 110

state 54

    (43) conditionSymbol -> LT .

    IDENTIFIER      reduce using rule 43 (conditionSymbol -> LT .)
    NUMBER          reduce using rule 43 (conditionSymbol -> LT .)
    (               reduce using rule 43 (conditionSymbol -> LT .)
    ADD_OP          reduce using rule 43 (conditionSymbol -> LT .)


state 55

    (44) conditionSymbol -> GT .

    IDENTIFIER      reduce using rule 44 (conditionSymbol -> GT .)
    NUMBER          reduce using rule 44 (conditionSymbol -> GT .)
    (               reduce using rule 44 (conditionSymbol -> GT .)
    ADD_OP          reduce using rule 44 (conditionSymbol -> GT .)


state 56

    (45) conditionSymbol -> LTE .

    IDENTIFIER      reduce using rule 45 (conditionSymbol -> LTE .)
    NUMBER          reduce using rule 45 (conditionSymbol -> LTE .)
    (               reduce using rule 45 (conditionSymbol -> LTE .)
    ADD_OP          reduce using rule 45 (conditionSymbol -> LTE .)


state 57

    (46) conditionSymbol -> GTE .

    IDENTIFIER      reduce using rule 46 (conditionSymbol -> GTE .)
    NUMBER          reduce using rule 46 (conditionSymbol -> GTE .)
    (               reduce using rule 46 (conditionSymbol -> GTE .)
    ADD_OP          reduce using rule 46 (conditionSymbol -> GTE .)


state 58

    (47) conditionSymbol -> EQUALV .

    IDENTIFIER      reduce using rule 47 (conditionSymbol -> EQUALV .)
    NUMBER          reduce using rule 47 (conditionSymbol -> EQUALV .)
    (               reduce using rule 47 (conditionSymbol -> EQUALV .)
    ADD_OP          reduce using rule 47 (conditionSymbol -> EQUALV .)


state 59

    (48) conditionSymbol -> EQUALVT .

    IDENTIFIER      reduce using rule 48 (conditionSymbol -> EQUALVT .)
    NUMBER          reduce using rule 48 (conditionSymbol -> EQUALVT .)
    (               reduce using rule 48 (conditionSymbol -> EQUALVT .)
    ADD_OP          reduce using rule 48 (conditionSymbol -> EQUALVT .)


state 60

    (49) conditionSymbol -> NOTEQUALV .

    IDENTIFIER      reduce using rule 49 (conditionSymbol -> NOTEQUALV .)
    NUMBER          reduce using rule 49 (conditionSymbol -> NOTEQUALV .)
    (               reduce using rule 49 (conditionSymbol -> NOTEQUALV .)
    ADD_OP          reduce using rule 49 (conditionSymbol -> NOTEQUALV .)


state 61

    (50) conditionSymbol -> NOTEQUALVT .

    IDENTIFIER      reduce using rule 50 (conditionSymbol -> NOTEQUALVT .)
    NUMBER          reduce using rule 50 (conditionSymbol -> NOTEQUALVT .)
    (               reduce using rule 50 (conditionSymbol -> NOTEQUALVT .)
    ADD_OP          reduce using rule 50 (conditionSymbol -> NOTEQUALVT .)


state 62

    (29) structure -> FOR new_scope . ( assignation ; condition ; assignation ) programBlock
    (30) structure -> FOR new_scope . ( assignation ; condition ; assignation ) programStatement

    (               shift and go to state 111


state 63

    (55) condition -> ( condition . )
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    )               shift and go to state 112
    AND             shift and go to state 66
    OR              shift and go to state 67


state 64

    (72) expression -> ( expression . )
    (54) condition -> expression . conditionSymbol expression
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (43) conditionSymbol -> . LT
    (44) conditionSymbol -> . GT
    (45) conditionSymbol -> . LTE
    (46) conditionSymbol -> . GTE
    (47) conditionSymbol -> . EQUALV
    (48) conditionSymbol -> . EQUALVT
    (49) conditionSymbol -> . NOTEQUALV
    (50) conditionSymbol -> . NOTEQUALVT

    )               shift and go to state 113
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    LTE             shift and go to state 56
    GTE             shift and go to state 57
    EQUALV          shift and go to state 58
    EQUALVT         shift and go to state 59
    NOTEQUALV       shift and go to state 60
    NOTEQUALVT      shift and go to state 61

    conditionSymbol                shift and go to state 51

state 65

    (28) structureTernary -> condition ? . returnValues : returnValues
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16
    [               shift and go to state 84

    returnValues                   shift and go to state 114
    expression                     shift and go to state 101
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82

state 66

    (52) condition -> condition AND . condition
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 115
    expression                     shift and go to state 17

state 67

    (53) condition -> condition OR . condition
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 116
    expression                     shift and go to state 17

state 68

    (31) structure -> WHILE ( . condition ) programStatement
    (32) structure -> WHILE ( . condition ) programBlock
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 117
    expression                     shift and go to state 17

state 69

    (33) structure -> DO programBlock . WHILE ( condition )

    WHILE           shift and go to state 118


state 70

    (34) structure -> DO programStatement . NEWLINE WHILE ( condition )

    NEWLINE         shift and go to state 119


state 71

    (8) programBlock -> NEWLINE . programBlock
    (11) statement -> NEWLINE . statement
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    programBlock                   shift and go to state 120
    statement                      shift and go to state 121
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 72

    (7) programBlock -> { . new_scope program }
    (1) new_scope -> .

    NEWLINE         reduce using rule 1 (new_scope -> .)
    IDENTIFIER      reduce using rule 1 (new_scope -> .)
    FOR             reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    DO              reduce using rule 1 (new_scope -> .)
    SWITCH          reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    LOG             reduce using rule 1 (new_scope -> .)
    BREAK           reduce using rule 1 (new_scope -> .)
    CONTINUE        reduce using rule 1 (new_scope -> .)
    FUNCTION        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    !               reduce using rule 1 (new_scope -> .)
    (               reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    LET             reduce using rule 1 (new_scope -> .)
    NUMBER          reduce using rule 1 (new_scope -> .)
    ADD_OP          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 122

state 73

    (10) programStatement -> statement .

    NEWLINE         reduce using rule 10 (programStatement -> statement .)
    ;               reduce using rule 10 (programStatement -> statement .)


state 74

    (35) structure -> SWITCH ( . IDENTIFIER ) { new_scope caseList }
    (36) structure -> SWITCH ( . IDENTIFIER ) { }

    IDENTIFIER      shift and go to state 123


state 75

    (23) structureIf -> IF ( . condition ) programStatement NEWLINE
    (24) structureIf -> IF ( . condition ) programBlock
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 124
    expression                     shift and go to state 17

state 76

    (58) logStatement -> LOG ( . returnValues )
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16
    [               shift and go to state 84

    returnValues                   shift and go to state 125
    expression                     shift and go to state 101
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82

state 77

    (84) functionDeclaration -> FUNCTION IDENTIFIER . ( new_scope argList ) programBlock
    (85) functionDeclaration -> FUNCTION IDENTIFIER . ( ) programBlock

    (               shift and go to state 126


state 78

    (93) returnStatement -> RETURN returnValues .

    ;               reduce using rule 93 (returnStatement -> RETURN returnValues .)
    NEWLINE         reduce using rule 93 (returnStatement -> RETURN returnValues .)


state 79

    (94) returnStatement -> RETURN condition .
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ;               reduce using rule 94 (returnStatement -> RETURN condition .)
    NEWLINE         reduce using rule 94 (returnStatement -> RETURN condition .)
    AND             shift and go to state 66
    OR              shift and go to state 67


state 80

    (95) returnValues -> expression .
    (54) condition -> expression . conditionSymbol expression
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (43) conditionSymbol -> . LT
    (44) conditionSymbol -> . GT
    (45) conditionSymbol -> . LTE
    (46) conditionSymbol -> . GTE
    (47) conditionSymbol -> . EQUALV
    (48) conditionSymbol -> . EQUALVT
    (49) conditionSymbol -> . NOTEQUALV
    (50) conditionSymbol -> . NOTEQUALVT

    ;               reduce using rule 95 (returnValues -> expression .)
    NEWLINE         reduce using rule 95 (returnValues -> expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    LTE             shift and go to state 56
    GTE             shift and go to state 57
    EQUALV          shift and go to state 58
    EQUALVT         shift and go to state 59
    NOTEQUALV       shift and go to state 60
    NOTEQUALVT      shift and go to state 61

    conditionSymbol                shift and go to state 51

state 81

    (96) returnValues -> arrayDeclaration .

    ;               reduce using rule 96 (returnValues -> arrayDeclaration .)
    NEWLINE         reduce using rule 96 (returnValues -> arrayDeclaration .)
    )               reduce using rule 96 (returnValues -> arrayDeclaration .)
    :               reduce using rule 96 (returnValues -> arrayDeclaration .)


state 82

    (97) returnValues -> functionCall .

    ;               reduce using rule 97 (returnValues -> functionCall .)
    NEWLINE         reduce using rule 97 (returnValues -> functionCall .)
    )               reduce using rule 97 (returnValues -> functionCall .)
    :               reduce using rule 97 (returnValues -> functionCall .)


state 83

    (69) expression -> IDENTIFIER . [ NUMBER ]
    (71) expression -> IDENTIFIER .
    (88) functionCall -> IDENTIFIER . ( expressionList )
    (89) functionCall -> IDENTIFIER . ( )

    [               shift and go to state 47
    ADD_OP          reduce using rule 71 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 71 (expression -> IDENTIFIER .)
    LT              reduce using rule 71 (expression -> IDENTIFIER .)
    GT              reduce using rule 71 (expression -> IDENTIFIER .)
    LTE             reduce using rule 71 (expression -> IDENTIFIER .)
    GTE             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALV          reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALVT         reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALV       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUALVT      reduce using rule 71 (expression -> IDENTIFIER .)
    ;               reduce using rule 71 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 71 (expression -> IDENTIFIER .)
    )               reduce using rule 71 (expression -> IDENTIFIER .)
    :               reduce using rule 71 (expression -> IDENTIFIER .)
    (               shift and go to state 46


state 84

    (63) arrayDeclaration -> [ . ]
    (64) arrayDeclaration -> [ . tokenList ]
    (65) tokenList -> . IDENTIFIER
    (66) tokenList -> . NUMBER
    (67) tokenList -> . tokenList , IDENTIFIER
    (68) tokenList -> . tokenList , NUMBER

    ]               shift and go to state 127
    IDENTIFIER      shift and go to state 129
    NUMBER          shift and go to state 130

    tokenList                      shift and go to state 128

state 85

    (51) condition -> ! condition .
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ?               reduce using rule 51 (condition -> ! condition .)
    AND             reduce using rule 51 (condition -> ! condition .)
    OR              reduce using rule 51 (condition -> ! condition .)
    )               reduce using rule 51 (condition -> ! condition .)
    ;               reduce using rule 51 (condition -> ! condition .)
    NEWLINE         reduce using rule 51 (condition -> ! condition .)

  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 86

    (59) varCreation -> VAR IDENTIFIER .

    =               reduce using rule 59 (varCreation -> VAR IDENTIFIER .)
    ,               reduce using rule 59 (varCreation -> VAR IDENTIFIER .)
    ;               reduce using rule 59 (varCreation -> VAR IDENTIFIER .)
    NEWLINE         reduce using rule 59 (varCreation -> VAR IDENTIFIER .)


state 87

    (60) varCreation -> LET IDENTIFIER .

    =               reduce using rule 60 (varCreation -> LET IDENTIFIER .)
    ,               reduce using rule 60 (varCreation -> LET IDENTIFIER .)
    ;               reduce using rule 60 (varCreation -> LET IDENTIFIER .)
    NEWLINE         reduce using rule 60 (varCreation -> LET IDENTIFIER .)


state 88

    (3) program -> statement ; NEWLINE .
    (2) program -> NEWLINE . program
    (11) statement -> NEWLINE . statement
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    $end            reduce using rule 3 (program -> statement ; NEWLINE .)
    }               reduce using rule 3 (program -> statement ; NEWLINE .)
    NEWLINE         reduce using rule 3 (program -> statement ; NEWLINE .)
    CASE            reduce using rule 3 (program -> statement ; NEWLINE .)
    DEFAULT         reduce using rule 3 (program -> statement ; NEWLINE .)
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

  ! NEWLINE         [ shift and go to state 2 ]

    statement                      shift and go to state 36
    program                        shift and go to state 35
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 89

    (5) program -> statement ; program .

    $end            reduce using rule 5 (program -> statement ; program .)
    }               reduce using rule 5 (program -> statement ; program .)
    NEWLINE         reduce using rule 5 (program -> statement ; program .)
    CASE            reduce using rule 5 (program -> statement ; program .)
    DEFAULT         reduce using rule 5 (program -> statement ; program .)


state 90

    (6) program -> statement NEWLINE program .

    $end            reduce using rule 6 (program -> statement NEWLINE program .)
    }               reduce using rule 6 (program -> statement NEWLINE program .)
    NEWLINE         reduce using rule 6 (program -> statement NEWLINE program .)
    CASE            reduce using rule 6 (program -> statement NEWLINE program .)
    DEFAULT         reduce using rule 6 (program -> statement NEWLINE program .)


state 91

    (25) structureElse -> ELSE programStatement .

    ;               reduce using rule 25 (structureElse -> ELSE programStatement .)
    NEWLINE         reduce using rule 25 (structureElse -> ELSE programStatement .)


state 92

    (26) structureElse -> ELSE programBlock .

    ;               reduce using rule 26 (structureElse -> ELSE programBlock .)
    NEWLINE         reduce using rule 26 (structureElse -> ELSE programBlock .)


state 93

    (82) assignation -> varList = returnValues .

    ;               reduce using rule 82 (assignation -> varList = returnValues .)
    NEWLINE         reduce using rule 82 (assignation -> varList = returnValues .)
    )               reduce using rule 82 (assignation -> varList = returnValues .)


state 94

    (83) assignation -> varList = structureTernary .

    ;               reduce using rule 83 (assignation -> varList = structureTernary .)
    NEWLINE         reduce using rule 83 (assignation -> varList = structureTernary .)
    )               reduce using rule 83 (assignation -> varList = structureTernary .)


state 95

    (95) returnValues -> expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (54) condition -> expression . conditionSymbol expression
    (43) conditionSymbol -> . LT
    (44) conditionSymbol -> . GT
    (45) conditionSymbol -> . LTE
    (46) conditionSymbol -> . GTE
    (47) conditionSymbol -> . EQUALV
    (48) conditionSymbol -> . EQUALVT
    (49) conditionSymbol -> . NOTEQUALV
    (50) conditionSymbol -> . NOTEQUALVT

    ;               reduce using rule 95 (returnValues -> expression .)
    NEWLINE         reduce using rule 95 (returnValues -> expression .)
    )               reduce using rule 95 (returnValues -> expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    LTE             shift and go to state 56
    GTE             shift and go to state 57
    EQUALV          shift and go to state 58
    EQUALVT         shift and go to state 59
    NOTEQUALV       shift and go to state 60
    NOTEQUALVT      shift and go to state 61

    conditionSymbol                shift and go to state 51

state 96

    (72) expression -> ( . expression )
    (55) condition -> ( . condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 96
    ADD_OP          shift and go to state 16
    !               shift and go to state 31

    expression                     shift and go to state 131
    condition                      shift and go to state 63

state 97

    (62) varList -> varList , IDENTIFIER .

    =               reduce using rule 62 (varList -> varList , IDENTIFIER .)
    ,               reduce using rule 62 (varList -> varList , IDENTIFIER .)
    ;               reduce using rule 62 (varList -> varList , IDENTIFIER .)
    NEWLINE         reduce using rule 62 (varList -> varList , IDENTIFIER .)


state 98

    (80) assignation -> IDENTIFIER ADD_OP ADD_OP .

    ;               reduce using rule 80 (assignation -> IDENTIFIER ADD_OP ADD_OP .)
    NEWLINE         reduce using rule 80 (assignation -> IDENTIFIER ADD_OP ADD_OP .)
    )               reduce using rule 80 (assignation -> IDENTIFIER ADD_OP ADD_OP .)


state 99

    (76) assignation -> IDENTIFIER ADD_OP = . expression
    (78) assignation -> IDENTIFIER ADD_OP = . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 132
    functionCall                   shift and go to state 133

state 100

    (81) assignation -> IDENTIFIER = returnValues .

    ;               reduce using rule 81 (assignation -> IDENTIFIER = returnValues .)
    NEWLINE         reduce using rule 81 (assignation -> IDENTIFIER = returnValues .)
    )               reduce using rule 81 (assignation -> IDENTIFIER = returnValues .)


state 101

    (95) returnValues -> expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ;               reduce using rule 95 (returnValues -> expression .)
    NEWLINE         reduce using rule 95 (returnValues -> expression .)
    )               reduce using rule 95 (returnValues -> expression .)
    :               reduce using rule 95 (returnValues -> expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 102

    (77) assignation -> IDENTIFIER MUL_OP = . expression
    (79) assignation -> IDENTIFIER MUL_OP = . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 134
    functionCall                   shift and go to state 135

state 103

    (88) functionCall -> IDENTIFIER ( expressionList . )
    (91) expressionList -> expressionList . , expression

    )               shift and go to state 136
    ,               shift and go to state 137


state 104

    (89) functionCall -> IDENTIFIER ( ) .

    ;               reduce using rule 89 (functionCall -> IDENTIFIER ( ) .)
    NEWLINE         reduce using rule 89 (functionCall -> IDENTIFIER ( ) .)
    )               reduce using rule 89 (functionCall -> IDENTIFIER ( ) .)
    :               reduce using rule 89 (functionCall -> IDENTIFIER ( ) .)


state 105

    (90) expressionList -> expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    )               reduce using rule 90 (expressionList -> expression .)
    ,               reduce using rule 90 (expressionList -> expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 106

    (69) expression -> IDENTIFIER [ NUMBER . ]

    ]               shift and go to state 138


state 107

    (72) expression -> ( expression . )
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    )               shift and go to state 113
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 108

    (54) condition -> expression conditionSymbol expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ?               reduce using rule 54 (condition -> expression conditionSymbol expression .)
    AND             reduce using rule 54 (condition -> expression conditionSymbol expression .)
    OR              reduce using rule 54 (condition -> expression conditionSymbol expression .)
    )               reduce using rule 54 (condition -> expression conditionSymbol expression .)
    ;               reduce using rule 54 (condition -> expression conditionSymbol expression .)
    NEWLINE         reduce using rule 54 (condition -> expression conditionSymbol expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 109

    (73) expression -> expression ADD_OP expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 73 (expression -> expression ADD_OP expression .)
    LT              reduce using rule 73 (expression -> expression ADD_OP expression .)
    GT              reduce using rule 73 (expression -> expression ADD_OP expression .)
    LTE             reduce using rule 73 (expression -> expression ADD_OP expression .)
    GTE             reduce using rule 73 (expression -> expression ADD_OP expression .)
    EQUALV          reduce using rule 73 (expression -> expression ADD_OP expression .)
    EQUALVT         reduce using rule 73 (expression -> expression ADD_OP expression .)
    NOTEQUALV       reduce using rule 73 (expression -> expression ADD_OP expression .)
    NOTEQUALVT      reduce using rule 73 (expression -> expression ADD_OP expression .)
    )               reduce using rule 73 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 73 (expression -> expression ADD_OP expression .)
    NEWLINE         reduce using rule 73 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 73 (expression -> expression ADD_OP expression .)
    ?               reduce using rule 73 (expression -> expression ADD_OP expression .)
    AND             reduce using rule 73 (expression -> expression ADD_OP expression .)
    OR              reduce using rule 73 (expression -> expression ADD_OP expression .)
    :               reduce using rule 73 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 53

  ! MUL_OP          [ reduce using rule 73 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 52 ]


state 110

    (74) expression -> expression MUL_OP expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 74 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 74 (expression -> expression MUL_OP expression .)
    LT              reduce using rule 74 (expression -> expression MUL_OP expression .)
    GT              reduce using rule 74 (expression -> expression MUL_OP expression .)
    LTE             reduce using rule 74 (expression -> expression MUL_OP expression .)
    GTE             reduce using rule 74 (expression -> expression MUL_OP expression .)
    EQUALV          reduce using rule 74 (expression -> expression MUL_OP expression .)
    EQUALVT         reduce using rule 74 (expression -> expression MUL_OP expression .)
    NOTEQUALV       reduce using rule 74 (expression -> expression MUL_OP expression .)
    NOTEQUALVT      reduce using rule 74 (expression -> expression MUL_OP expression .)
    )               reduce using rule 74 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 74 (expression -> expression MUL_OP expression .)
    NEWLINE         reduce using rule 74 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 74 (expression -> expression MUL_OP expression .)
    ?               reduce using rule 74 (expression -> expression MUL_OP expression .)
    AND             reduce using rule 74 (expression -> expression MUL_OP expression .)
    OR              reduce using rule 74 (expression -> expression MUL_OP expression .)
    :               reduce using rule 74 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 52 ]
  ! MUL_OP          [ shift and go to state 53 ]


state 111

    (29) structure -> FOR new_scope ( . assignation ; condition ; assignation ) programBlock
    (30) structure -> FOR new_scope ( . assignation ; condition ; assignation ) programStatement
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER

    IDENTIFIER      shift and go to state 140
    VAR             shift and go to state 32
    LET             shift and go to state 33

    assignation                    shift and go to state 139
    varList                        shift and go to state 141
    varCreation                    shift and go to state 30

state 112

    (55) condition -> ( condition ) .

    ?               reduce using rule 55 (condition -> ( condition ) .)
    AND             reduce using rule 55 (condition -> ( condition ) .)
    OR              reduce using rule 55 (condition -> ( condition ) .)
    )               reduce using rule 55 (condition -> ( condition ) .)
    ;               reduce using rule 55 (condition -> ( condition ) .)
    NEWLINE         reduce using rule 55 (condition -> ( condition ) .)


state 113

    (72) expression -> ( expression ) .

    ADD_OP          reduce using rule 72 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 72 (expression -> ( expression ) .)
    LT              reduce using rule 72 (expression -> ( expression ) .)
    GT              reduce using rule 72 (expression -> ( expression ) .)
    LTE             reduce using rule 72 (expression -> ( expression ) .)
    GTE             reduce using rule 72 (expression -> ( expression ) .)
    EQUALV          reduce using rule 72 (expression -> ( expression ) .)
    EQUALVT         reduce using rule 72 (expression -> ( expression ) .)
    NOTEQUALV       reduce using rule 72 (expression -> ( expression ) .)
    NOTEQUALVT      reduce using rule 72 (expression -> ( expression ) .)
    )               reduce using rule 72 (expression -> ( expression ) .)
    ;               reduce using rule 72 (expression -> ( expression ) .)
    NEWLINE         reduce using rule 72 (expression -> ( expression ) .)
    ,               reduce using rule 72 (expression -> ( expression ) .)
    ?               reduce using rule 72 (expression -> ( expression ) .)
    AND             reduce using rule 72 (expression -> ( expression ) .)
    OR              reduce using rule 72 (expression -> ( expression ) .)
    :               reduce using rule 72 (expression -> ( expression ) .)


state 114

    (28) structureTernary -> condition ? returnValues . : returnValues

    :               shift and go to state 142


state 115

    (52) condition -> condition AND condition .
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ?               reduce using rule 52 (condition -> condition AND condition .)
    AND             reduce using rule 52 (condition -> condition AND condition .)
    OR              reduce using rule 52 (condition -> condition AND condition .)
    )               reduce using rule 52 (condition -> condition AND condition .)
    ;               reduce using rule 52 (condition -> condition AND condition .)
    NEWLINE         reduce using rule 52 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 116

    (53) condition -> condition OR condition .
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ?               reduce using rule 53 (condition -> condition OR condition .)
    OR              reduce using rule 53 (condition -> condition OR condition .)
    )               reduce using rule 53 (condition -> condition OR condition .)
    ;               reduce using rule 53 (condition -> condition OR condition .)
    NEWLINE         reduce using rule 53 (condition -> condition OR condition .)
    AND             shift and go to state 66

  ! AND             [ reduce using rule 53 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 67 ]


state 117

    (31) structure -> WHILE ( condition . ) programStatement
    (32) structure -> WHILE ( condition . ) programBlock
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    )               shift and go to state 143
    AND             shift and go to state 66
    OR              shift and go to state 67


state 118

    (33) structure -> DO programBlock WHILE . ( condition )

    (               shift and go to state 144


state 119

    (34) structure -> DO programStatement NEWLINE . WHILE ( condition )

    WHILE           shift and go to state 145


state 120

    (8) programBlock -> NEWLINE programBlock .

    WHILE           reduce using rule 8 (programBlock -> NEWLINE programBlock .)
    ;               reduce using rule 8 (programBlock -> NEWLINE programBlock .)
    NEWLINE         reduce using rule 8 (programBlock -> NEWLINE programBlock .)
    ELSE            reduce using rule 8 (programBlock -> NEWLINE programBlock .)


state 121

    (11) statement -> NEWLINE statement .

    NEWLINE         reduce using rule 11 (statement -> NEWLINE statement .)
    ;               reduce using rule 11 (statement -> NEWLINE statement .)


state 122

    (7) programBlock -> { new_scope . program }
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    program                        shift and go to state 146
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 123

    (35) structure -> SWITCH ( IDENTIFIER . ) { new_scope caseList }
    (36) structure -> SWITCH ( IDENTIFIER . ) { }

    )               shift and go to state 147


state 124

    (23) structureIf -> IF ( condition . ) programStatement NEWLINE
    (24) structureIf -> IF ( condition . ) programBlock
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    )               shift and go to state 148
    AND             shift and go to state 66
    OR              shift and go to state 67


state 125

    (58) logStatement -> LOG ( returnValues . )

    )               shift and go to state 149


state 126

    (84) functionDeclaration -> FUNCTION IDENTIFIER ( . new_scope argList ) programBlock
    (85) functionDeclaration -> FUNCTION IDENTIFIER ( . ) programBlock
    (1) new_scope -> .

    )               shift and go to state 151
    IDENTIFIER      reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 150

state 127

    (63) arrayDeclaration -> [ ] .

    ;               reduce using rule 63 (arrayDeclaration -> [ ] .)
    NEWLINE         reduce using rule 63 (arrayDeclaration -> [ ] .)
    )               reduce using rule 63 (arrayDeclaration -> [ ] .)
    :               reduce using rule 63 (arrayDeclaration -> [ ] .)


state 128

    (64) arrayDeclaration -> [ tokenList . ]
    (67) tokenList -> tokenList . , IDENTIFIER
    (68) tokenList -> tokenList . , NUMBER

    ]               shift and go to state 152
    ,               shift and go to state 153


state 129

    (65) tokenList -> IDENTIFIER .

    ]               reduce using rule 65 (tokenList -> IDENTIFIER .)
    ,               reduce using rule 65 (tokenList -> IDENTIFIER .)


state 130

    (66) tokenList -> NUMBER .

    ]               reduce using rule 66 (tokenList -> NUMBER .)
    ,               reduce using rule 66 (tokenList -> NUMBER .)


state 131

    (72) expression -> ( expression . )
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (54) condition -> expression . conditionSymbol expression
    (43) conditionSymbol -> . LT
    (44) conditionSymbol -> . GT
    (45) conditionSymbol -> . LTE
    (46) conditionSymbol -> . GTE
    (47) conditionSymbol -> . EQUALV
    (48) conditionSymbol -> . EQUALVT
    (49) conditionSymbol -> . NOTEQUALV
    (50) conditionSymbol -> . NOTEQUALVT

    )               shift and go to state 113
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    LTE             shift and go to state 56
    GTE             shift and go to state 57
    EQUALV          shift and go to state 58
    EQUALVT         shift and go to state 59
    NOTEQUALV       shift and go to state 60
    NOTEQUALVT      shift and go to state 61

    conditionSymbol                shift and go to state 51

state 132

    (76) assignation -> IDENTIFIER ADD_OP = expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ;               reduce using rule 76 (assignation -> IDENTIFIER ADD_OP = expression .)
    NEWLINE         reduce using rule 76 (assignation -> IDENTIFIER ADD_OP = expression .)
    )               reduce using rule 76 (assignation -> IDENTIFIER ADD_OP = expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 133

    (78) assignation -> IDENTIFIER ADD_OP = functionCall .

    ;               reduce using rule 78 (assignation -> IDENTIFIER ADD_OP = functionCall .)
    NEWLINE         reduce using rule 78 (assignation -> IDENTIFIER ADD_OP = functionCall .)
    )               reduce using rule 78 (assignation -> IDENTIFIER ADD_OP = functionCall .)


state 134

    (77) assignation -> IDENTIFIER MUL_OP = expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    ;               reduce using rule 77 (assignation -> IDENTIFIER MUL_OP = expression .)
    NEWLINE         reduce using rule 77 (assignation -> IDENTIFIER MUL_OP = expression .)
    )               reduce using rule 77 (assignation -> IDENTIFIER MUL_OP = expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 135

    (79) assignation -> IDENTIFIER MUL_OP = functionCall .

    ;               reduce using rule 79 (assignation -> IDENTIFIER MUL_OP = functionCall .)
    NEWLINE         reduce using rule 79 (assignation -> IDENTIFIER MUL_OP = functionCall .)
    )               reduce using rule 79 (assignation -> IDENTIFIER MUL_OP = functionCall .)


state 136

    (88) functionCall -> IDENTIFIER ( expressionList ) .

    ;               reduce using rule 88 (functionCall -> IDENTIFIER ( expressionList ) .)
    NEWLINE         reduce using rule 88 (functionCall -> IDENTIFIER ( expressionList ) .)
    )               reduce using rule 88 (functionCall -> IDENTIFIER ( expressionList ) .)
    :               reduce using rule 88 (functionCall -> IDENTIFIER ( expressionList ) .)


state 137

    (91) expressionList -> expressionList , . expression
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 154

state 138

    (69) expression -> IDENTIFIER [ NUMBER ] .

    ADD_OP          reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    MUL_OP          reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    LT              reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    GT              reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    LTE             reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    GTE             reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    EQUALV          reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    EQUALVT         reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    NOTEQUALV       reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    NOTEQUALVT      reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    )               reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    ;               reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    NEWLINE         reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    ,               reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    ?               reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    AND             reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    OR              reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)
    :               reduce using rule 69 (expression -> IDENTIFIER [ NUMBER ] .)


state 139

    (29) structure -> FOR new_scope ( assignation . ; condition ; assignation ) programBlock
    (30) structure -> FOR new_scope ( assignation . ; condition ; assignation ) programStatement

    ;               shift and go to state 155


state 140

    (76) assignation -> IDENTIFIER . ADD_OP = expression
    (77) assignation -> IDENTIFIER . MUL_OP = expression
    (78) assignation -> IDENTIFIER . ADD_OP = functionCall
    (79) assignation -> IDENTIFIER . MUL_OP = functionCall
    (80) assignation -> IDENTIFIER . ADD_OP ADD_OP
    (81) assignation -> IDENTIFIER . = returnValues

    ADD_OP          shift and go to state 43
    MUL_OP          shift and go to state 45
    =               shift and go to state 44


state 141

    (82) assignation -> varList . = returnValues
    (83) assignation -> varList . = structureTernary
    (62) varList -> varList . , IDENTIFIER

    =               shift and go to state 41
    ,               shift and go to state 42


state 142

    (28) structureTernary -> condition ? returnValues : . returnValues
    (95) returnValues -> . expression
    (96) returnValues -> . arrayDeclaration
    (97) returnValues -> . functionCall
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression
    (63) arrayDeclaration -> . [ ]
    (64) arrayDeclaration -> . [ tokenList ]
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16
    [               shift and go to state 84

    returnValues                   shift and go to state 156
    expression                     shift and go to state 101
    arrayDeclaration               shift and go to state 81
    functionCall                   shift and go to state 82

state 143

    (31) structure -> WHILE ( condition ) . programStatement
    (32) structure -> WHILE ( condition ) . programBlock
    (10) programStatement -> . statement
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 20
    programStatement               shift and go to state 157
    programBlock                   shift and go to state 158
    statement                      shift and go to state 73
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    varCreation                    shift and go to state 30

state 144

    (33) structure -> DO programBlock WHILE ( . condition )
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 159
    expression                     shift and go to state 17

state 145

    (34) structure -> DO programStatement NEWLINE WHILE . ( condition )

    (               shift and go to state 160


state 146

    (7) programBlock -> { new_scope program . }

    }               shift and go to state 161


state 147

    (35) structure -> SWITCH ( IDENTIFIER ) . { new_scope caseList }
    (36) structure -> SWITCH ( IDENTIFIER ) . { }

    {               shift and go to state 162


state 148

    (23) structureIf -> IF ( condition ) . programStatement NEWLINE
    (24) structureIf -> IF ( condition ) . programBlock
    (10) programStatement -> . statement
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 20
    programStatement               shift and go to state 163
    programBlock                   shift and go to state 164
    statement                      shift and go to state 73
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    varCreation                    shift and go to state 30

state 149

    (58) logStatement -> LOG ( returnValues ) .

    ;               reduce using rule 58 (logStatement -> LOG ( returnValues ) .)
    NEWLINE         reduce using rule 58 (logStatement -> LOG ( returnValues ) .)


state 150

    (84) functionDeclaration -> FUNCTION IDENTIFIER ( new_scope . argList ) programBlock
    (86) argList -> . IDENTIFIER
    (87) argList -> . argList , IDENTIFIER

    IDENTIFIER      shift and go to state 165

    argList                        shift and go to state 166

state 151

    (85) functionDeclaration -> FUNCTION IDENTIFIER ( ) . programBlock
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock

    {               shift and go to state 72
    NEWLINE         shift and go to state 168

    programBlock                   shift and go to state 167

state 152

    (64) arrayDeclaration -> [ tokenList ] .

    ;               reduce using rule 64 (arrayDeclaration -> [ tokenList ] .)
    NEWLINE         reduce using rule 64 (arrayDeclaration -> [ tokenList ] .)
    )               reduce using rule 64 (arrayDeclaration -> [ tokenList ] .)
    :               reduce using rule 64 (arrayDeclaration -> [ tokenList ] .)


state 153

    (67) tokenList -> tokenList , . IDENTIFIER
    (68) tokenList -> tokenList , . NUMBER

    IDENTIFIER      shift and go to state 169
    NUMBER          shift and go to state 170


state 154

    (91) expressionList -> expressionList , expression .
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression

    )               reduce using rule 91 (expressionList -> expressionList , expression .)
    ,               reduce using rule 91 (expressionList -> expressionList , expression .)
    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53


state 155

    (29) structure -> FOR new_scope ( assignation ; . condition ; assignation ) programBlock
    (30) structure -> FOR new_scope ( assignation ; . condition ; assignation ) programStatement
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 171
    expression                     shift and go to state 17

state 156

    (28) structureTernary -> condition ? returnValues : returnValues .

    ;               reduce using rule 28 (structureTernary -> condition ? returnValues : returnValues .)
    NEWLINE         reduce using rule 28 (structureTernary -> condition ? returnValues : returnValues .)
    )               reduce using rule 28 (structureTernary -> condition ? returnValues : returnValues .)


state 157

    (31) structure -> WHILE ( condition ) programStatement .

    ;               reduce using rule 31 (structure -> WHILE ( condition ) programStatement .)
    NEWLINE         reduce using rule 31 (structure -> WHILE ( condition ) programStatement .)


state 158

    (32) structure -> WHILE ( condition ) programBlock .

    ;               reduce using rule 32 (structure -> WHILE ( condition ) programBlock .)
    NEWLINE         reduce using rule 32 (structure -> WHILE ( condition ) programBlock .)


state 159

    (33) structure -> DO programBlock WHILE ( condition . )
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    )               shift and go to state 172
    AND             shift and go to state 66
    OR              shift and go to state 67


state 160

    (34) structure -> DO programStatement NEWLINE WHILE ( . condition )
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    !               shift and go to state 31
    (               shift and go to state 19
    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    condition                      shift and go to state 173
    expression                     shift and go to state 17

state 161

    (7) programBlock -> { new_scope program } .

    WHILE           reduce using rule 7 (programBlock -> { new_scope program } .)
    ;               reduce using rule 7 (programBlock -> { new_scope program } .)
    NEWLINE         reduce using rule 7 (programBlock -> { new_scope program } .)
    ELSE            reduce using rule 7 (programBlock -> { new_scope program } .)


state 162

    (35) structure -> SWITCH ( IDENTIFIER ) { . new_scope caseList }
    (36) structure -> SWITCH ( IDENTIFIER ) { . }
    (1) new_scope -> .

    }               shift and go to state 175
    NEWLINE         reduce using rule 1 (new_scope -> .)
    CASE            reduce using rule 1 (new_scope -> .)
    DEFAULT         reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 174

state 163

    (23) structureIf -> IF ( condition ) programStatement . NEWLINE

    NEWLINE         shift and go to state 176


state 164

    (24) structureIf -> IF ( condition ) programBlock .

    ELSE            reduce using rule 24 (structureIf -> IF ( condition ) programBlock .)
    ;               reduce using rule 24 (structureIf -> IF ( condition ) programBlock .)
    NEWLINE         reduce using rule 24 (structureIf -> IF ( condition ) programBlock .)


state 165

    (86) argList -> IDENTIFIER .

    )               reduce using rule 86 (argList -> IDENTIFIER .)
    ,               reduce using rule 86 (argList -> IDENTIFIER .)


state 166

    (84) functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList . ) programBlock
    (87) argList -> argList . , IDENTIFIER

    )               shift and go to state 177
    ,               shift and go to state 178


state 167

    (85) functionDeclaration -> FUNCTION IDENTIFIER ( ) programBlock .

    ;               reduce using rule 85 (functionDeclaration -> FUNCTION IDENTIFIER ( ) programBlock .)
    NEWLINE         reduce using rule 85 (functionDeclaration -> FUNCTION IDENTIFIER ( ) programBlock .)


state 168

    (8) programBlock -> NEWLINE . programBlock
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock

    {               shift and go to state 72
    NEWLINE         shift and go to state 168

    programBlock                   shift and go to state 120

state 169

    (67) tokenList -> tokenList , IDENTIFIER .

    ]               reduce using rule 67 (tokenList -> tokenList , IDENTIFIER .)
    ,               reduce using rule 67 (tokenList -> tokenList , IDENTIFIER .)


state 170

    (68) tokenList -> tokenList , NUMBER .

    ]               reduce using rule 68 (tokenList -> tokenList , NUMBER .)
    ,               reduce using rule 68 (tokenList -> tokenList , NUMBER .)


state 171

    (29) structure -> FOR new_scope ( assignation ; condition . ; assignation ) programBlock
    (30) structure -> FOR new_scope ( assignation ; condition . ; assignation ) programStatement
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    ;               shift and go to state 179
    AND             shift and go to state 66
    OR              shift and go to state 67


state 172

    (33) structure -> DO programBlock WHILE ( condition ) .

    ;               reduce using rule 33 (structure -> DO programBlock WHILE ( condition ) .)
    NEWLINE         reduce using rule 33 (structure -> DO programBlock WHILE ( condition ) .)


state 173

    (34) structure -> DO programStatement NEWLINE WHILE ( condition . )
    (52) condition -> condition . AND condition
    (53) condition -> condition . OR condition

    )               shift and go to state 180
    AND             shift and go to state 66
    OR              shift and go to state 67


state 174

    (35) structure -> SWITCH ( IDENTIFIER ) { new_scope . caseList }
    (37) caseList -> . NEWLINE caseList
    (39) caseList -> . caseStructure
    (41) caseList -> . caseList NEWLINE caseStructure
    (42) caseList -> . caseList caseStructure
    (38) caseStructure -> . CASE expression caseProgram
    (40) caseStructure -> . DEFAULT caseProgram

    NEWLINE         shift and go to state 182
    CASE            shift and go to state 184
    DEFAULT         shift and go to state 185

    caseList                       shift and go to state 181
    caseStructure                  shift and go to state 183

state 175

    (36) structure -> SWITCH ( IDENTIFIER ) { } .

    ;               reduce using rule 36 (structure -> SWITCH ( IDENTIFIER ) { } .)
    NEWLINE         reduce using rule 36 (structure -> SWITCH ( IDENTIFIER ) { } .)


state 176

    (23) structureIf -> IF ( condition ) programStatement NEWLINE .

    ELSE            reduce using rule 23 (structureIf -> IF ( condition ) programStatement NEWLINE .)
    ;               reduce using rule 23 (structureIf -> IF ( condition ) programStatement NEWLINE .)
    NEWLINE         reduce using rule 23 (structureIf -> IF ( condition ) programStatement NEWLINE .)


state 177

    (84) functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList ) . programBlock
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock

    {               shift and go to state 72
    NEWLINE         shift and go to state 168

    programBlock                   shift and go to state 186

state 178

    (87) argList -> argList , . IDENTIFIER

    IDENTIFIER      shift and go to state 187


state 179

    (29) structure -> FOR new_scope ( assignation ; condition ; . assignation ) programBlock
    (30) structure -> FOR new_scope ( assignation ; condition ; . assignation ) programStatement
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER

    IDENTIFIER      shift and go to state 140
    VAR             shift and go to state 32
    LET             shift and go to state 33

    assignation                    shift and go to state 188
    varList                        shift and go to state 141
    varCreation                    shift and go to state 30

state 180

    (34) structure -> DO programStatement NEWLINE WHILE ( condition ) .

    ;               reduce using rule 34 (structure -> DO programStatement NEWLINE WHILE ( condition ) .)
    NEWLINE         reduce using rule 34 (structure -> DO programStatement NEWLINE WHILE ( condition ) .)


state 181

    (35) structure -> SWITCH ( IDENTIFIER ) { new_scope caseList . }
    (41) caseList -> caseList . NEWLINE caseStructure
    (42) caseList -> caseList . caseStructure
    (38) caseStructure -> . CASE expression caseProgram
    (40) caseStructure -> . DEFAULT caseProgram

    }               shift and go to state 189
    NEWLINE         shift and go to state 190
    CASE            shift and go to state 184
    DEFAULT         shift and go to state 185

    caseStructure                  shift and go to state 191

state 182

    (37) caseList -> NEWLINE . caseList
    (37) caseList -> . NEWLINE caseList
    (39) caseList -> . caseStructure
    (41) caseList -> . caseList NEWLINE caseStructure
    (42) caseList -> . caseList caseStructure
    (38) caseStructure -> . CASE expression caseProgram
    (40) caseStructure -> . DEFAULT caseProgram

    NEWLINE         shift and go to state 182
    CASE            shift and go to state 184
    DEFAULT         shift and go to state 185

    caseList                       shift and go to state 192
    caseStructure                  shift and go to state 183

state 183

    (39) caseList -> caseStructure .

    }               reduce using rule 39 (caseList -> caseStructure .)
    NEWLINE         reduce using rule 39 (caseList -> caseStructure .)
    CASE            reduce using rule 39 (caseList -> caseStructure .)
    DEFAULT         reduce using rule 39 (caseList -> caseStructure .)


state 184

    (38) caseStructure -> CASE . expression caseProgram
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 34
    (               shift and go to state 50
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 193

state 185

    (40) caseStructure -> DEFAULT . caseProgram
    (9) caseProgram -> . : new_scope program

    :               shift and go to state 195

    caseProgram                    shift and go to state 194

state 186

    (84) functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList ) programBlock .

    ;               reduce using rule 84 (functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList ) programBlock .)
    NEWLINE         reduce using rule 84 (functionDeclaration -> FUNCTION IDENTIFIER ( new_scope argList ) programBlock .)


state 187

    (87) argList -> argList , IDENTIFIER .

    )               reduce using rule 87 (argList -> argList , IDENTIFIER .)
    ,               reduce using rule 87 (argList -> argList , IDENTIFIER .)


state 188

    (29) structure -> FOR new_scope ( assignation ; condition ; assignation . ) programBlock
    (30) structure -> FOR new_scope ( assignation ; condition ; assignation . ) programStatement

    )               shift and go to state 196


state 189

    (35) structure -> SWITCH ( IDENTIFIER ) { new_scope caseList } .

    ;               reduce using rule 35 (structure -> SWITCH ( IDENTIFIER ) { new_scope caseList } .)
    NEWLINE         reduce using rule 35 (structure -> SWITCH ( IDENTIFIER ) { new_scope caseList } .)


state 190

    (41) caseList -> caseList NEWLINE . caseStructure
    (38) caseStructure -> . CASE expression caseProgram
    (40) caseStructure -> . DEFAULT caseProgram

    CASE            shift and go to state 184
    DEFAULT         shift and go to state 185

    caseStructure                  shift and go to state 197

state 191

    (42) caseList -> caseList caseStructure .

    }               reduce using rule 42 (caseList -> caseList caseStructure .)
    NEWLINE         reduce using rule 42 (caseList -> caseList caseStructure .)
    CASE            reduce using rule 42 (caseList -> caseList caseStructure .)
    DEFAULT         reduce using rule 42 (caseList -> caseList caseStructure .)


state 192

    (37) caseList -> NEWLINE caseList .
    (41) caseList -> caseList . NEWLINE caseStructure
    (42) caseList -> caseList . caseStructure
    (38) caseStructure -> . CASE expression caseProgram
    (40) caseStructure -> . DEFAULT caseProgram

    }               reduce using rule 37 (caseList -> NEWLINE caseList .)
    NEWLINE         reduce using rule 37 (caseList -> NEWLINE caseList .)
    CASE            reduce using rule 37 (caseList -> NEWLINE caseList .)
    DEFAULT         reduce using rule 37 (caseList -> NEWLINE caseList .)

  ! NEWLINE         [ shift and go to state 190 ]
  ! CASE            [ shift and go to state 184 ]
  ! DEFAULT         [ shift and go to state 185 ]

    caseStructure                  shift and go to state 191

state 193

    (38) caseStructure -> CASE expression . caseProgram
    (73) expression -> expression . ADD_OP expression
    (74) expression -> expression . MUL_OP expression
    (9) caseProgram -> . : new_scope program

    ADD_OP          shift and go to state 52
    MUL_OP          shift and go to state 53
    :               shift and go to state 195

    caseProgram                    shift and go to state 198

state 194

    (40) caseStructure -> DEFAULT caseProgram .

    }               reduce using rule 40 (caseStructure -> DEFAULT caseProgram .)
    NEWLINE         reduce using rule 40 (caseStructure -> DEFAULT caseProgram .)
    CASE            reduce using rule 40 (caseStructure -> DEFAULT caseProgram .)
    DEFAULT         reduce using rule 40 (caseStructure -> DEFAULT caseProgram .)


state 195

    (9) caseProgram -> : . new_scope program
    (1) new_scope -> .

    NEWLINE         reduce using rule 1 (new_scope -> .)
    IDENTIFIER      reduce using rule 1 (new_scope -> .)
    FOR             reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    DO              reduce using rule 1 (new_scope -> .)
    SWITCH          reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    LOG             reduce using rule 1 (new_scope -> .)
    BREAK           reduce using rule 1 (new_scope -> .)
    CONTINUE        reduce using rule 1 (new_scope -> .)
    FUNCTION        reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    !               reduce using rule 1 (new_scope -> .)
    (               reduce using rule 1 (new_scope -> .)
    VAR             reduce using rule 1 (new_scope -> .)
    LET             reduce using rule 1 (new_scope -> .)
    NUMBER          reduce using rule 1 (new_scope -> .)
    ADD_OP          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 199

state 196

    (29) structure -> FOR new_scope ( assignation ; condition ; assignation ) . programBlock
    (30) structure -> FOR new_scope ( assignation ; condition ; assignation ) . programStatement
    (7) programBlock -> . { new_scope program }
    (8) programBlock -> . NEWLINE programBlock
    (10) programStatement -> . statement
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    {               shift and go to state 72
    NEWLINE         shift and go to state 71
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    assignation                    shift and go to state 4
    condition                      shift and go to state 20
    programBlock                   shift and go to state 200
    programStatement               shift and go to state 201
    statement                      shift and go to state 73
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    varCreation                    shift and go to state 30

state 197

    (41) caseList -> caseList NEWLINE caseStructure .

    }               reduce using rule 41 (caseList -> caseList NEWLINE caseStructure .)
    NEWLINE         reduce using rule 41 (caseList -> caseList NEWLINE caseStructure .)
    CASE            reduce using rule 41 (caseList -> caseList NEWLINE caseStructure .)
    DEFAULT         reduce using rule 41 (caseList -> caseList NEWLINE caseStructure .)


state 198

    (38) caseStructure -> CASE expression caseProgram .

    }               reduce using rule 38 (caseStructure -> CASE expression caseProgram .)
    NEWLINE         reduce using rule 38 (caseStructure -> CASE expression caseProgram .)
    CASE            reduce using rule 38 (caseStructure -> CASE expression caseProgram .)
    DEFAULT         reduce using rule 38 (caseStructure -> CASE expression caseProgram .)


state 199

    (9) caseProgram -> : new_scope . program
    (2) program -> . NEWLINE program
    (3) program -> . statement ; NEWLINE
    (4) program -> . statement NEWLINE
    (5) program -> . statement ; program
    (6) program -> . statement NEWLINE program
    (11) statement -> . NEWLINE statement
    (12) statement -> . assignation
    (13) statement -> . structure
    (14) statement -> . structureIf
    (15) statement -> . structureTernary
    (16) statement -> . logStatement
    (17) statement -> . breakStatement
    (18) statement -> . continueStatement
    (19) statement -> . functionDeclaration
    (20) statement -> . functionCall
    (21) statement -> . returnStatement
    (22) statement -> . varList
    (76) assignation -> . IDENTIFIER ADD_OP = expression
    (77) assignation -> . IDENTIFIER MUL_OP = expression
    (78) assignation -> . IDENTIFIER ADD_OP = functionCall
    (79) assignation -> . IDENTIFIER MUL_OP = functionCall
    (80) assignation -> . IDENTIFIER ADD_OP ADD_OP
    (81) assignation -> . IDENTIFIER = returnValues
    (82) assignation -> . varList = returnValues
    (83) assignation -> . varList = structureTernary
    (27) structure -> . structureIf structureElse
    (29) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programBlock
    (30) structure -> . FOR new_scope ( assignation ; condition ; assignation ) programStatement
    (31) structure -> . WHILE ( condition ) programStatement
    (32) structure -> . WHILE ( condition ) programBlock
    (33) structure -> . DO programBlock WHILE ( condition )
    (34) structure -> . DO programStatement NEWLINE WHILE ( condition )
    (35) structure -> . SWITCH ( IDENTIFIER ) { new_scope caseList }
    (36) structure -> . SWITCH ( IDENTIFIER ) { }
    (23) structureIf -> . IF ( condition ) programStatement NEWLINE
    (24) structureIf -> . IF ( condition ) programBlock
    (28) structureTernary -> . condition ? returnValues : returnValues
    (58) logStatement -> . LOG ( returnValues )
    (56) breakStatement -> . BREAK
    (57) continueStatement -> . CONTINUE
    (84) functionDeclaration -> . FUNCTION IDENTIFIER ( new_scope argList ) programBlock
    (85) functionDeclaration -> . FUNCTION IDENTIFIER ( ) programBlock
    (88) functionCall -> . IDENTIFIER ( expressionList )
    (89) functionCall -> . IDENTIFIER ( )
    (92) returnStatement -> . RETURN
    (93) returnStatement -> . RETURN returnValues
    (94) returnStatement -> . RETURN condition
    (61) varList -> . varCreation
    (62) varList -> . varList , IDENTIFIER
    (51) condition -> . ! condition
    (52) condition -> . condition AND condition
    (53) condition -> . condition OR condition
    (54) condition -> . expression conditionSymbol expression
    (55) condition -> . ( condition )
    (59) varCreation -> . VAR IDENTIFIER
    (60) varCreation -> . LET IDENTIFIER
    (69) expression -> . IDENTIFIER [ NUMBER ]
    (70) expression -> . NUMBER
    (71) expression -> . IDENTIFIER
    (72) expression -> . ( expression )
    (73) expression -> . expression ADD_OP expression
    (74) expression -> . expression MUL_OP expression
    (75) expression -> . ADD_OP expression

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 15
    FOR             shift and go to state 18
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    SWITCH          shift and go to state 23
    IF              shift and go to state 24
    LOG             shift and go to state 25
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    FUNCTION        shift and go to state 28
    RETURN          shift and go to state 29
    !               shift and go to state 31
    (               shift and go to state 19
    VAR             shift and go to state 32
    LET             shift and go to state 33
    NUMBER          shift and go to state 34
    ADD_OP          shift and go to state 16

    program                        shift and go to state 202
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    structure                      shift and go to state 5
    structureIf                    shift and go to state 6
    structureTernary               shift and go to state 7
    logStatement                   shift and go to state 8
    breakStatement                 shift and go to state 9
    continueStatement              shift and go to state 10
    functionDeclaration            shift and go to state 11
    functionCall                   shift and go to state 12
    returnStatement                shift and go to state 13
    varList                        shift and go to state 14
    expression                     shift and go to state 17
    condition                      shift and go to state 20
    varCreation                    shift and go to state 30

state 200

    (29) structure -> FOR new_scope ( assignation ; condition ; assignation ) programBlock .

    ;               reduce using rule 29 (structure -> FOR new_scope ( assignation ; condition ; assignation ) programBlock .)
    NEWLINE         reduce using rule 29 (structure -> FOR new_scope ( assignation ; condition ; assignation ) programBlock .)


state 201

    (30) structure -> FOR new_scope ( assignation ; condition ; assignation ) programStatement .

    ;               reduce using rule 30 (structure -> FOR new_scope ( assignation ; condition ; assignation ) programStatement .)
    NEWLINE         reduce using rule 30 (structure -> FOR new_scope ( assignation ; condition ; assignation ) programStatement .)


state 202

    (9) caseProgram -> : new_scope program .

    }               reduce using rule 9 (caseProgram -> : new_scope program .)
    NEWLINE         reduce using rule 9 (caseProgram -> : new_scope program .)
    CASE            reduce using rule 9 (caseProgram -> : new_scope program .)
    DEFAULT         reduce using rule 9 (caseProgram -> : new_scope program .)

